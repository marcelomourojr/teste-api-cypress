class Entity
  constructor: (@_variable)

class Transaction
  # I propose we use _ for "private" variables, aye!
  constructor: () ->
    @_cypherString = ""
    @_variableCode = 96 # 97 is 'a', but we ++
    @_variableReset = 122 # 'z'
    @_variableVar = [@_variableCode]
    
  compile: () -> @_cypherString
  
  # we should abstract these out so that we just tack on DELETE or MATCH depending on whether it's a DELETE or MATCH. but we can do that later
  _matchEdge: (pattern) -> "YOO MATCHING AN EDGE NOW WITH VARIABLE #{@_variable()}"
  _matchNode: (pattern) -> "YOO MATCHING A NODE NOW WITH VARIABLE #{@_variable()}"

  _variable: () ->
    [others..., last] = @_variableVar
    toConcat = if @_variableReset <= last
      [@_variableReset, @_variableCode]
    else 
      [last + 1]
    @_variableVar = others.concat toConcat
    (String.fromCharCode l for l in @_variableVar).join ""
  
  match: (pattern) ->
    if pattern.$to? or pattern.$from? or pattern.$type? or pattern.$by?
      unless pattern.$to? and pattern.$from? and pattern.$type?
        throw new Error "Edge must have all required properties!"
      else
        @_matchEdge pattern
    else
      @_matchNode pattern
  
  create: (pattern) ->
    console.log 'yay create stuff'
  
  del: (pattern) ->
    console.log 'yay create stuff'
  
  ret: (option) ->
    console.log 'yay return stuff'
    
  retrun: (option) -> # wraps run
    console.log 'yay return stuff'
    
  run: (option, callback) ->
    console.log 'yay run the op stuff'

foo = new Transaction() # ok yay :D hush we'll fix it don't worry OH IT WORKED?? YAY starts with 'b' though
(console.log foo._variable() for a in [0..50]) #excess output warning from coderpad? :/
  