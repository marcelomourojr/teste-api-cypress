var Entity, Transaction, a, foo, _i,
  __slice = [].slice;

Entity = (function() {
  var _class;

  function Entity() {
    return _class.apply(this, arguments);
  }

  _class = Entity._variable;

  return Entity;

})();

Transaction = (function() {
  function Transaction() {
    this._cypherString = "";
    this._variableCode = 96;
    this._variableReset = 122;
    this._variableVar = [this._variableCode];
  }

  Transaction.prototype.compile = function() {
    return this._cypherString;
  };

  Transaction.prototype._matchEdge = function(pattern) {
    return "YOO MATCHING AN EDGE NOW WITH VARIABLE " + (this._variable());
  };

  Transaction.prototype._matchNode = function(pattern) {
    return "YOO MATCHING A NODE NOW WITH VARIABLE " + (this._variable());
  };

  Transaction.prototype._variable = function() {
    var l, last, others, toConcat, _i, _ref;
    _ref = this._variableVar, others = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), last = _ref[_i++];
    toConcat = this._variableReset <= last ? [this._variableReset, this._variableCode] : [last + 1];
    this._variableVar = others.concat(toConcat);
    return ((function() {
      var _j, _len, _ref1, _results;
      _ref1 = this._variableVar;
      _results = [];
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        l = _ref1[_j];
        _results.push(String.fromCharCode(l));
      }
      return _results;
    }).call(this)).join("");
  };

  Transaction.prototype.match = function(pattern) {
    if ((pattern.$to != null) || (pattern.$from != null) || (pattern.$type != null) || (pattern.$by != null)) {
      if (!((pattern.$to != null) && (pattern.$from != null) && (pattern.$type != null))) {
        throw new Error("Edge must have all required properties!");
      } else {
        return this._matchEdge(pattern);
      }
    } else {
      return this._matchNode(pattern);
    }
  };

  Transaction.prototype.create = function(pattern) {
    return console.log('yay create stuff');
  };

  Transaction.prototype.del = function(pattern) {
    return console.log('yay create stuff');
  };

  Transaction.prototype.ret = function(option) {
    return console.log('yay return stuff');
  };

  Transaction.prototype.retrun = function(option) {
    return console.log('yay return stuff');
  };

  Transaction.prototype.run = function(option, callback) {
    return console.log('yay run the op stuff');
  };

  return Transaction;

})();

foo = new Transaction();

for (a = _i = 0; _i <= 50; a = ++_i) {
  console.log(foo._variable());
}